name: Create Repository from Template

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'New repository name'
        required: true
        type: string
      repo_description:
        description: 'Repository description'
        required: true
        type: string
      repo_visibility:
        description: 'Repository visibility'
        required: true
        type: choice
        options:
          - public
          - private
      owner:
        description: 'GitHub username or organization'
        required: true
        type: string

jobs:
  create-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Create Repository
        uses: actions/github-script@v7
        with:
          script: |
            const repoName = context.payload.inputs.repo_name;
            const description = context.payload.inputs.repo_description;
            const visibility = context.payload.inputs.repo_visibility;
            const owner = context.payload.inputs.owner;
            
            // Create new repository from template
            const response = await github.rest.repos.createUsingTemplate({
              template_owner: context.repo.owner,
              template_repo: context.repo.repo,
              name: repoName,
              description: description,
              private: visibility === 'private',
              owner: owner,
              include_all_branches: false
            });
            
            console.log(`Repository created: ${response.data.html_url}`);
            
            // Update repository settings
            await github.rest.repos.update({
              owner: owner,
              repo: repoName,
              allow_auto_merge: true,
              allow_merge_commit: true,
              allow_squash_merge: true,
              allow_rebase_merge: true,
              delete_branch_on_merge: true
            });
            
            // Create initial commit with updated module name
            const moduleName = `github.com/${owner}/${repoName}`;
            const goModContent = await github.rest.repos.getContent({
              owner: owner,
              repo: repoName,
              path: 'go.mod'
            });
            
            const updatedGoMod = Buffer.from(goModContent.data.content, 'base64')
              .toString()
              .replace(/module .*/, `module ${moduleName}`);
            
            await github.rest.repos.createOrUpdateFileContents({
              owner: owner,
              repo: repoName,
              path: 'go.mod',
              message: 'chore: update module name',
              content: Buffer.from(updatedGoMod).toString('base64'),
              sha: goModContent.data.sha
            });
            
            // Create initial commit with updated README
            const readmeContent = await github.rest.repos.getContent({
              owner: owner,
              repo: repoName,
              path: 'README.md'
            });
            
            const updatedReadme = Buffer.from(readmeContent.data.content, 'base64')
              .toString()
              .replace(/go-template-repo/g, repoName)
              .replace(/Go Template Repository/g, description);
            
            await github.rest.repos.createOrUpdateFileContents({
              owner: owner,
              repo: repoName,
              path: 'README.md',
              message: 'chore: update repository name and description',
              content: Buffer.from(updatedReadme).toString('base64'),
              sha: readmeContent.data.sha
            });
            
            // Create branch protection rules
            await github.rest.repos.updateBranchProtection({
              owner: owner,
              repo: repoName,
              branch: 'main',
              required_status_checks: null,
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 1
              },
              restrictions: null
            });
            
            // Create issue labels
            const labels = [
              { name: 'bug', color: 'd73a4a', description: 'Something isn\'t working' },
              { name: 'enhancement', color: 'a2eeef', description: 'New feature or request' },
              { name: 'documentation', color: '0075ca', description: 'Improvements or additions to documentation' },
              { name: 'good first issue', color: '7057ff', description: 'Good for newcomers' },
              { name: 'help wanted', color: '008672', description: 'Extra attention is needed' }
            ];
            
            for (const label of labels) {
              await github.rest.issues.createLabel({
                owner: owner,
                repo: repoName,
                name: label.name,
                color: label.color,
                description: label.description
              });
            }
            
            // Create initial issue
            await github.rest.issues.create({
              owner: owner,
              repo: repoName,
              title: 'Welcome to the project!',
              body: `## Getting Started\n\n1. Clone the repository\n2. Run \`go mod tidy\`\n3. Copy \`.env.example\` to \`.env\`\n4. Start coding!\n\n## Development\n\n- Follow the project structure\n- Write tests for new features\n- Update documentation as needed\n\n## Contributing\n\n1. Create a new branch\n2. Make your changes\n3. Submit a pull request\n\n## License\n\nThis project is licensed under the MIT License.`
            }); 